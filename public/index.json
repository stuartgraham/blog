[{"content":"Best Practises GitHub\u0026rsquo;s documentation outlines the recommendation to use OIDC functionality between various cloud providers, this allows for the use of short lived credentials as opposed to statically stored secrets which need to be manually created and are prone to proliferation.\nWhen using Github repos to define parts of your AWS configuration, rather than use the manual method, a better approach is to use a CloudFormation template. A CloudFormation template can be used to create a CloudFormation stack in your AWS account to quickly form the OIDC connection between the accounts IAM identity provider feature and a specific repo, allowing for secure exchange of credentials between the pair of entities.\nPay attention to, and edit, ManagedPolicyArns section where it is recommended to scope this to the least privilege needed.\nCloudFormation Template AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: Template to create OIDC Connection Parameters: GitHubOwner: Type: String Description: Enter Github repo owner GitHubRepo: Type: String Description: Enter Github repo name Resources: IamOidcIdentityProvider: Type: AWS::IAM::OIDCProvider Properties: ClientIdList: - sts.amazonaws.com Tags: - Key: \u0026#39;Consumer\u0026#39; Value: !Sub - \u0026#39;Github Actions access for https://github.com/${RepoOwner}/${RepoName}\u0026#39; - RepoOwner: !Ref GitHubOwner RepoName: !Ref GitHubRepo ThumbprintList: - 6938fd4d98bab03faadb97b34396831e3780aea1 Url: https://token.actions.githubusercontent.com IamOidcIdpRole: Type: AWS::IAM::Role Properties: RoleName: GithubOidcRole Description: Provides administrator access Tags: - Key: \u0026#39;Consumer\u0026#39; Value: !Sub - \u0026#39;Github Actions access for https://github.com/${RepoOwner}/${RepoName}\u0026#39; - RepoOwner: !Ref GitHubOwner RepoName: !Ref GitHubRepo AssumeRolePolicyDocument: Version: \u0026#34;2012-10-17\u0026#34; Statement: - Effect: Allow Principal: Federated: !Sub - \u0026#39;arn:aws:iam::${AccountID}:oidc-provider/token.actions.githubusercontent.com\u0026#39; - AccountID: !Ref AWS::AccountId Action: sts:AssumeRoleWithWebIdentity Condition: StringLike: token.actions.githubusercontent.com:sub: !Sub - repo:${RepoOwner}/${RepoName}*:* - RepoOwner: !Ref GitHubOwner RepoName: !Ref GitHubRepo StringEquals: token.actions.githubusercontent.com:aud: sts.amazonaws.com ManagedPolicyArns: - arn:aws:iam::aws:policy/AdministratorAccess GitHub Actions After the CloudFormation stack is installed you can now use the aws-actions/configure-aws-credentials action to transparently call for short lived credentials to be used in your workflows using the many AWS APIs, or perhaps deploy CDK deployments straight from GitHub.\n- name: Configure AWS Credentials uses: aws-actions/configure-aws-credentials@v1-node16 with: role-to-assume: arn:aws:iam::112233445566:role/GithubOidcRole role-session-name: GitHubActions-${{ github.run_id }} aws-region: eu-west-1 ","permalink":"https://blog.rstu.xyz/posts/github-aws-oidc-cloudformation/","summary":"Quickly integrating AWS and GitHub using OIDC and CloudFormation","title":"AWS/GitHub OIDC Cloudformation"}]