"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shellWithAction = exports.randomInteger = exports.SamIntegrationTestFixture = exports.withSamIntegrationFixture = exports.withSamIntegrationCdkApp = void 0;
const child_process = require("child_process");
const fs = require("fs");
const os = require("os");
const path = require("path");
const axios_1 = require("axios");
const cdk_1 = require("./cdk");
/**
 * Higher order function to execute a block with a SAM Integration CDK app fixture
 */
function withSamIntegrationCdkApp(block) {
    return async (context) => {
        const randy = cdk_1.randomString();
        const stackNamePrefix = `cdktest-${randy}`;
        const integTestDir = path.join(os.tmpdir(), `cdk-integ-${randy}`);
        context.output.write(` Stack prefix:   ${stackNamePrefix}\n`);
        context.output.write(` Test directory: ${integTestDir}\n`);
        context.output.write(` Region:         ${context.aws.region}\n`);
        await cdk_1.cloneDirectory(path.join(__dirname, '..', 'cli', 'sam_cdk_integ_app'), integTestDir, context.output);
        const fixture = new SamIntegrationTestFixture(integTestDir, stackNamePrefix, context.output, context.aws);
        let success = true;
        try {
            const installationVersion = cdk_1.FRAMEWORK_VERSION;
            if (cdk_1.MAJOR_VERSION === '1') {
                await cdk_1.installNpmPackages(fixture, {
                    '@aws-cdk/aws-iam': installationVersion,
                    '@aws-cdk/aws-apigateway': installationVersion,
                    '@aws-cdk/aws-lambda': installationVersion,
                    '@aws-cdk/aws-lambda-go': installationVersion,
                    '@aws-cdk/aws-lambda-nodejs': installationVersion,
                    '@aws-cdk/aws-lambda-python': installationVersion,
                    '@aws-cdk/aws-logs': installationVersion,
                    '@aws-cdk/core': installationVersion,
                    'constructs': '^3',
                });
            }
            else {
                const alphaInstallationVersion = installationVersion.includes('rc') ? installationVersion.replace('rc', 'alpha') : `${installationVersion}-alpha.0`;
                await cdk_1.installNpmPackages(fixture, {
                    'aws-cdk-lib': installationVersion,
                    '@aws-cdk/aws-lambda-go-alpha': alphaInstallationVersion,
                    '@aws-cdk/aws-lambda-python-alpha': alphaInstallationVersion,
                    'constructs': '^10',
                });
            }
            await block(fixture);
        }
        catch (e) {
            // We survive certain cases involving gopkg.in
            if (errorCausedByGoPkg(e.message)) {
                return;
            }
            success = false;
            throw e;
        }
        finally {
            if (process.env.INTEG_NO_CLEAN) {
                process.stderr.write(`Left test directory in '${integTestDir}' ($INTEG_NO_CLEAN)\n`);
            }
            else {
                await fixture.dispose(success);
            }
        }
    };
}
exports.withSamIntegrationCdkApp = withSamIntegrationCdkApp;
/**
 * Return whether or not the error is being caused by gopkg.in being down
 *
 * Our Go build depends on https://gopkg.in/, which has errors pretty often
 * (every couple of days). It is run by a single volunteer.
 */
function errorCausedByGoPkg(error) {
    // The error is different depending on what request fails. Messages recognized:
    ////////////////////////////////////////////////////////////////////
    //    go: github.com/aws/aws-lambda-go@v1.28.0 requires
    //        gopkg.in/yaml.v3@v3.0.0-20200615113413-eeeca48fe776: invalid version: git ls-remote -q origin in /go/pkg/mod/cache/vcs/0901dc1ef67fcce1c9b3ae51078740de4a0e2dc673e720584ac302973af82f36: exit status 128:
    //        remote: Cannot obtain refs from GitHub: cannot talk to GitHub: Get https://github.com/go-yaml/yaml.git/info/refs?service=git-upload-pack: net/http: request canceled (Client.Timeout exceeded while awaiting headers)
    //        fatal: unable to access 'https://gopkg.in/yaml.v3/': The requested URL returned error: 502
    ////////////////////////////////////////////////////////////////////
    //    go: downloading github.com/aws/aws-lambda-go v1.28.0
    //    go: github.com/aws/aws-lambda-go@v1.28.0 requires
    //        gopkg.in/yaml.v3@v3.0.0-20200615113413-eeeca48fe776: unrecognized import path "gopkg.in/yaml.v3": reading https://gopkg.in/yaml.v3?go-get=1: 502 Bad Gateway
    //        server response: Cannot obtain refs from GitHub: cannot talk to GitHub: Get https://github.com/go-yaml/yaml.git/info/refs?service=git-upload-pack: net/http: request canceled (Client.Timeout exceeded while awaiting headers)
    ////////////////////////////////////////////////////////////////////
    //    go: github.com/aws/aws-lambda-go@v1.28.0 requires
    //        gopkg.in/yaml.v3@v3.0.0-20200615113413-eeeca48fe776: invalid version: git fetch -f origin refs/heads/*:refs/heads/* refs/tags/*:refs/tags/* in /go/pkg/mod/cache/vcs/0901dc1ef67fcce1c9b3ae51078740de4a0e2dc673e720584ac302973af82f36: exit status 128:
    //        error: RPC failed; HTTP 502 curl 22 The requested URL returned error: 502
    //        fatal: the remote end hung up unexpectedly
    ////////////////////////////////////////////////////////////////////
    return (error.includes('gopkg\.in.*invalid version.*exit status 128')
        || error.match(/unrecognized import path[^\n]gopkg\.in/));
}
/**
 * SAM Integration test fixture for CDK - SAM integration test cases
 */
function withSamIntegrationFixture(block) {
    return cdk_1.withAws(withSamIntegrationCdkApp(block));
}
exports.withSamIntegrationFixture = withSamIntegrationFixture;
class SamIntegrationTestFixture extends cdk_1.TestFixture {
    constructor(integTestDir, stackNamePrefix, output, aws) {
        super(integTestDir, stackNamePrefix, output, aws);
        this.integTestDir = integTestDir;
        this.stackNamePrefix = stackNamePrefix;
        this.output = output;
        this.aws = aws;
    }
    async samShell(command, filter, action, options = {}) {
        return shellWithAction(command, filter, action, {
            output: this.output,
            cwd: path.join(this.integTestDir, 'cdk.out').toString(),
            ...options,
        });
    }
    async samBuild(stackName) {
        const fullStackName = this.fullStackName(stackName);
        const templatePath = path.join(this.integTestDir, 'cdk.out', `${fullStackName}.template.json`);
        const args = ['--template', templatePath.toString()];
        return this.samShell(['sam', 'build', ...args]);
    }
    async samLocalStartApi(stackName, isBuilt, port, apiPath) {
        const fullStackName = this.fullStackName(stackName);
        const templatePath = path.join(this.integTestDir, 'cdk.out', `${fullStackName}.template.json`);
        const args = isBuilt ? [] : ['--template', templatePath.toString()];
        args.push('--port');
        args.push(port.toString());
        return this.samShell(['sam', 'local', 'start-api', ...args], '(Press CTRL+C to quit)', () => {
            return new Promise((resolve, reject) => {
                axios_1.default.get(`http://127.0.0.1:${port}${apiPath}`).then(resp => {
                    resolve(resp.data);
                }).catch(error => {
                    reject(new Error(`Failed to invoke api path ${apiPath} on port ${port} with error ${error}`));
                });
            });
        });
    }
    /**
     * Cleanup leftover stacks and buckets
     */
    async dispose(success) {
        // If the tests completed successfully, happily delete the fixture
        // (otherwise leave it for humans to inspect)
        if (success) {
            cdk_1.rimraf(this.integTestDir);
        }
    }
}
exports.SamIntegrationTestFixture = SamIntegrationTestFixture;
function randomInteger(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}
exports.randomInteger = randomInteger;
/**
 * A shell command that does what you want
 *
 * Is platform-aware, handles errors nicely.
 */
async function shellWithAction(command, filter, action, options = {}) {
    if (options.modEnv && options.env) {
        throw new Error('Use either env or modEnv but not both');
    }
    options.output?.write(`ðŸ’» ${command.join(' ')}\n`);
    const env = options.env ?? (options.modEnv ? { ...process.env, ...options.modEnv } : undefined);
    const child = child_process.spawn(command[0], command.slice(1), {
        ...options,
        env,
        // Need this for Windows where we want .cmd and .bat to be found as well.
        shell: true,
        stdio: ['ignore', 'pipe', 'pipe'],
    });
    return new Promise((resolve, reject) => {
        const out = new Array();
        const stdout = new Array();
        const stderr = new Array();
        let actionSucceeded = false;
        let actionOutput;
        let actionExecuted = false;
        function executeAction(chunk) {
            out.push(chunk);
            if (!actionExecuted && typeof filter === 'string' && out.toString().includes(filter) && typeof action === 'function') {
                actionExecuted = true;
                options.output?.write('before executing action');
                action().then((output) => {
                    options.output?.write(`action output is ${output}`);
                    actionOutput = output;
                    actionSucceeded = true;
                }).catch((error) => {
                    options.output?.write(`action error is ${error}`);
                    actionSucceeded = false;
                    actionOutput = error;
                }).finally(() => {
                    options.output?.write('terminate sam sub process');
                    killSubProcess(child, command.join(' '));
                });
            }
        }
        child.stdout.on('data', chunk => {
            options.output?.write(chunk);
            stdout.push(chunk);
            executeAction(chunk);
        });
        child.stderr.on('data', chunk => {
            options.output?.write(chunk);
            if (options.captureStderr ?? true) {
                stderr.push(chunk);
            }
            executeAction(chunk);
        });
        child.once('error', reject);
        child.once('close', code => {
            const output = (Buffer.concat(stdout).toString('utf-8') + Buffer.concat(stderr).toString('utf-8')).trim();
            if (code == null || code === 0 || options.allowErrExit) {
                let result = new Array();
                result.push(actionOutput);
                result.push(output);
                resolve({
                    actionSucceeded: actionSucceeded,
                    actionOutput: actionOutput,
                    shellOutput: output,
                });
            }
            else {
                reject(new Error(`'${command.join(' ')}' exited with error code ${code}. Output: \n${output}`));
            }
        });
    });
}
exports.shellWithAction = shellWithAction;
function killSubProcess(child, command) {
    /**
     * Check if the sub process is running in container, so child_process.spawn will
     * create multiple processes, and to kill all of them we need to run different logic
     */
    if (fs.existsSync('/.dockerenv')) {
        child_process.exec(`for pid in $(ps -ef | grep "${command}" | awk '{print $2}'); do kill -2 $pid; done`);
    }
    else {
        child.kill('SIGINT');
    }
}
//# sourceMappingURL=data:application/json;base64,